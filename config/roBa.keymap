#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT
#define JP_AMPERSAND    CARET
#define JP_QUOTE        AMPERSAND
#define JP_EQUAL        UNDER
#define JP_CARET        EQUAL
#define JP_YEN          0x89
#define JP_PLUS         COLON
#define JP_TILDE        PLUS
#define JP_PIPE         LS(0x89)
#define JP_AT           LEFT_BRACKET
#define JP_COLON        SINGLE_QUOTE
#define JP_ASTERISK     DOUBLE_QUOTES
#define JP_BACKQUOTE    LEFT_BRACE
#define JP_UNDERSCORE   LS(0x87)
#define JP_SEMICOLON    SEMICOLON
#define JP_LBRACKET     RIGHT_BRACKET
#define JP_RBRACKET     BACKSLASH
#define JP_LPAREN       ASTERISK
#define JP_RPAREN       LEFT_PARENTHESIS
#define JP_LBRACE       RIGHT_BRACE
#define JP_RBRACE       PIPE
#define JP_KANA         LANGUAGE_1
#define JP_EISU         LANGUAGE_2
#define JP_HANZEN       GRAVE

//

#define MOUSE 5
#define SCROLL 6
#define NUM 7

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        muhennkann {
            bindings = <&to_layer_0 TAB>;
            key-positions = <11 10>;
        };

        lanlan2 {
            bindings = <&kp LANGUAGE_2>;
            key-positions = <13 12>;
        };

        lanlan1 {
            bindings = <&kp LANG1>;
            key-positions = <18 19>;
        };

        ControlZ {
            bindings = <&kp LC(Z)>;
            key-positions = <22 23>;
        };

        ControlX {
            bindings = <&kp LC(X)>;
            key-positions = <23 24>;
        };

        ControlC {
            bindings = <&kp LC(C)>;
            key-positions = <24 25>;
        };

        ControlV {
            bindings = <&kp LC(V)>;
            key-positions = <25 26>;
        };

        bluetoothGo {
            bindings = <&to 7>;
            key-positions = <32 42>;
        };

        ControlY {
            bindings = <&kp LC(Y)>;
            key-positions = <5 6>;
        };

        parentheses {
            bindings = <&parentheses>;
            key-positions = <17 18>;
        };

        brackets {
            bindings = <&brackets>;
            key-positions = <29 30>;
        };

        leftclick {
            bindings = <&mkp MB1>;
            key-positions = <30 31>;
        };

        rightclick {
            bindings = <&mkp MB2>;
            key-positions = <31 32>;
        };

        backclick {
            bindings = <&mkp MB4>;
            key-positions = <32 33>;
        };

        windowslock {
            bindings = <&kp LG(L)>;
            key-positions = <8 9>;
        };

        teamsedit {
            bindings = <&kp LC(LS(X))>;
            key-positions = <41 30>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        muhenkan_at: muhenkan_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_BRACKET>;
            label = "MUHENKAN_AT";
        };

        Doc_Open: Doc_Open {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(C)>,
                <&macro_wait_time 300>,
                <&kp LG(R)>,
                <&macro_wait_time 300>,
                <&kp LC(V)>,
                <&macro_wait_time 300>,
                <&kp KP_ENTER>;

            label = "DOC_OPEN";
        };

        muhenkan_underbar: muhenkan_underbar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp JP_UNDERSCORE>;
            label = "MUHENKAN_UNDERBAR";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp JP_LPAREN &kp JP_RPAREN &kp_exit_AML LEFT>;
            label = "PARENTHESES";
        };

        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp JP_LBRACKET &kp JP_RBRACKET &kp_exit_AML LEFT>;
            label = "BRACKETS";
        };

        esc_eisu: esc_eisu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp JP_EISU>;
            label = "ESC_EISU";
        };

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 5>;

            label = "MKP_EXIT_AML";
        };

        caps_word_exit_AML: caps_word_exit_AML {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&exit_AML &caps_word>;
            label = "caps_word_exit_AML";
        };

        sk_shift_exit_AML: sk_shift_exit_AML {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&exit_AML &sk LEFT_SHIFT>;
            label = "SK_SHIFT_EXIT_AML";
        };

        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 5>;
            label = "exit_AML";
        };

        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };

        mo_exit_AML: mo_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&exit_AML>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>;

            label = "MO_exit_AML";
        };

        toggle_mute: toggle_mute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(A) &kp LC(LS(M))>;
            label = "TOGGLE_MUTE";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        wait: wait {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_wait_time 200>;
            label = "WAIT";
        };

        bluetooth: bluetooth {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_WIN>,
                <&macro_wait_time 500>,
                <&kp B &kp L &kp U &kp E &kp T &kp O &kp O &kp T &kp H &kp KP_ENTER>;

            label = "BLUETOOTH";
        };

        notepad: notepad {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 500>,
                <&kp N &kp O &kp T &kp E &kp P &kp A &kp D &kp KP_ENTER>;

            label = "NOTEPAD";
        };

        kp_equal: kp_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp RS(UNDERSCORE)>;
            label = "KP_EQUAL";
        };

        muhenkan_underbar_mac: muhenkan_underbar_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp AT_SIGN>;
            label = "MUHENKAN_UNDERBAR_MAC";
        };

        bt2toMAC: bt2toMAC {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &to 1>;
            label = "BT2TOMAC";
        };

        // Commented out as currently unused, but may be used in the future 
        // mod_exit_AML: mod_exit_AML {
        //     compatible = "zmk,behavior-macro-one-param";
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     #binding-cells = <1>;
        //     bindings =
        //         <&macro_press>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
        //         <&macro_tap>,
        //         <&exit_AML>,
        //         <&macro_pause_for_release>,
        //         <&macro_release>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        //     label = "MOD_exit_AML";
        // };
    };

    behaviors {
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // Commented out as currently unused, but may be used in the future 
        // lt_exit_AML: lt_exit_AML {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LT_exit_AML";
        //     bindings = <&mo_exit_AML>, <&kp_exit_AML>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <200>;
        //     flavor = "balanced";
        // };
        // lt_exit_AML_on_hold: lt_exit_AML_on_hold {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LT_exit_AML_ON_HOLD";
        //     bindings = <&mo_exit_AML>, <&kp>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <200>;
        //     flavor = "balanced";
        // };
        // mt_exit_AML: mt_exit_AML {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "MT_exit_AML";
        //     bindings = <&mod_exit_AML>, <&kp_exit_AML>;
        //     #binding-cells = <2>;
        //     tapping-term-ms = <200>;
        //     flavor = "balanced";
        //     quick-tap-ms = <200>;
        // };

        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R               &kp T                                               &kp Y        &kp U             &kp I           &kp O    &kp P
&kp A             &kp S         &kp D         &mt LEFT_SHIFT F    &kp G        &kp QUESTION         &kp SINGLE_QUOTE  &kp H        &mt LEFT_SHIFT J  &mt LEFT_WIN K  &kp L    &lt 6 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V               &kp B        &kp EXCLAMATION      &kp SEMICOLON     &kp N        &mt LCTRL M       &kp COMMA       &kp DOT  &mt LEFT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 INT_MUHENKAN  &lt 4 SPACE  &lt 2 DEL            &kp BACKSPACE     &lt 4 ENTER                                             &muhenkan_at
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Mac_layer {
            bindings = <
&kp Q                 &kp W     &kp E             &kp R             &kp T                                    &kp Y        &kp U               &kp I      &kp O    &kp P
&kp A                 &kp S     &kp D             &mt LEFT_SHIFT F  &kp G      &kp LS(QMARK)      &kp COLON  &kp H        &mt LEFT_SHIFT J    &kp K      &kp L    &trans
&mt X LEFT_SHIFT      &kp X     &kp C             &kp V             &kp B      &kp LS(EXCL)       &kp SEMI   &kp N        &mt LEFT_COMMAND M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&kp LG(LEFT_CONTROL)  &kp LALT  &kp LEFT_COMMAND  &lt 8 F7          &kp SPACE  &lt 2 DELETE       &kp BSPC   &lt 9 ENTER                                          &muhenkan_underbar_mac
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans      &kp LC(F1)  &kp F11  &kp F12                       &kp LS(LC(R))  &kp LS(LC(U))     &kp LS(LC(I))  &kp LS(LC(O))      &kp LS(LC(P))
&trans  &kp F6      &kp F7      &kp F8   &kp F9   &kp F10      &trans  &trans         &trans            &trans         &trans             &trans
&trans  &kp LA(F1)  &kp F2      &kp F3   &kp F4   &kp F5       &trans  &trans         &kp LG(LS(LEFT))  &trans         &kp LG(LS(RIGHT))  &trans
&trans  &trans      &trans      &trans   &trans   &trans       &trans  &trans                                                             &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS    &kp HASH         &kp LS(EQUAL)       &kp DOLLAR           &kp PERCENT                                                             &kp KP_MINUS     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp BACKSPACE
&kp INT_YEN  &kp EXCLAMATION  &muhenkan_underbar  &kp LC(KP_MULTIPLY)  &kp LC(COLON)             &kp LC(LA(KP_NUMBER_0))      &kp_equal        &kp KP_PLUS      &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ENTER
&kp AT_SIGN  &kp AMPERSAND    &kp DOUBLE_QUOTES   &kp ASTERISK         &kp LS(LEFT_PARENTHESIS)  &kp RS(N0)                   &kp KP_ASTERISK  &kp KP_DIVIDE    &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD
&trans       &trans           &trans              &trans               &trans                    &trans                       &trans           &kp KP_NUMBER_0                                                     &kp COMMA
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE        &kp LC(LS(TAB))  &kp LC(F1)  &kp LC(R)   &Doc_Open                                                &kp LC(KP_MINUS)  &kp LC(HOME)  &kp LG(LS(S))  &kp LC(END)  &kp BACKSPACE
&kp HOME          &kp LC(S)        &kp LC(D)   &kp LC(N5)  &kp LC(SEMICOLON)  &kp LC(PAGE_UP)        &kp PAGE_UP    &kp LC(KP_PLUS)   &kp HOME      &kp UP_ARROW   &kp END      &kp ENTER
&mt LEFT_SHIFT Z  &kp LC(X)        &kp LC(C)   &kp LC(V)   &kp LC(B)          &kp LC(PAGE_DOWN)      &kp PAGE_DOWN  &kp LC(LS(N))     &kp LEFT      &kp DOWN       &kp RIGHT    &kp DELETE
&trans            &trans           &trans      &trans      &trans             &trans                 &trans         &trans                                                      &kp F2
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&kp_exit_AML Q  &kp_exit_AML W  &kp_exit_AML E  &kp_exit_AML R  &trans                                 &trans  &trans  &trans  &trans  &trans
&kp_exit_AML A  &kp_exit_AML S  &kp_exit_AML D  &trans          &kp_exit_AML G  &trans      &exit_AML  &trans  &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans          &trans          &trans      &exit_AML  &trans  &trans  &trans  &trans  &trans
&trans          &trans          &trans          &trans          &trans          &trans      &trans     &trans                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &none
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &trans  &trans  &trans  &kp KP_NUMLOCK                           &bt BT_SEL 0  &bt2toMAC  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans          &bootloader      &to 1   &trans        &trans     &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans          &trans           &to 0   &trans        &trans     &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans          &trans           &trans  &trans                                               &trans
            >;
        };

        NUM_MAC {
            bindings = <
&kp LG(LSHFT)  &kp LS(POUND)  &kp RSHFT      &kp LS(DLLR)   &kp LS(PRCNT)                                     &kp MINUS     &kp N7  &kp N8  &kp N9  &kp BSPC
&kp LS(PIPE)   &kp LS(EXCL)   &kp LS(UNDER)  &kp LG(COLON)  &kp LG(SEMI)   &kp LC(LA(N0))      &kp LS(EQUAL)  &kp LS(PLUS)  &kp N4  &kp N5  &kp N6  &kp RET
&kp LS(DQT)    &kp LS(SQT)    &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)   &kp LS(RPAR)        &kp LS(STAR)   &kp FSLH      &kp N1  &kp N2  &kp N3  &kp DOT
&trans         &trans         &trans         &trans         &trans         &trans              &trans         &kp N0                                &kp COMMA
            >;
        };

        ARROW_MAC {
            bindings = <
&none      &none  &none  &none  &none                    &none  &kp LC(HOME)  &kp LC(LG(LS(NUMBER_4)))  &kp LC(END)  &kp BSPC
&kp COMMA  &none  &none  &none  &none  &none      &none  &none  &kp HOME      &kp UP                    &kp END      &kp RET
&none      &none  &none  &none  &none  &none      &none  &none  &kp LEFT      &kp DOWN                  &kp RIGHT    &kp DEL
&none      &none  &none  &none  &none  &none      &none  &none                                                       &kp F2
            >;
        };
    };
};
